PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX shex: <http://shex.io/ns/shex#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
#ShExc definition of ShExJ
#Shape Expression Vocabulary
#This document describes the RDFS vocabulary description used in the Shape Expression Language (ShEx) [[shex]] along with the default JSON-LD Context.
#Date: 2017-02-25
#Imports 
#Version https://github.com/shexSpec/shexspec.github.io/commit/438072ef278b13410485054901dd37c7b0e30da1
#See also <https://shexspec.github.io/spec>
  

start = @shex:Schema


# Shape definitions
shex:Annotation {
  shex:object IRI ;
  shex:predicate IRI ;
}
shex:Cardinality {
}
shex:EachOf {
  #// rdfs:subClassOf shex:TripleExpression;
  shex:annotation @shex:Annotation* ;
  shex:expressions @shex:TripleExpression+ ;
  shex:max (xsd:integer OR @shex: Cardinality) ;
  shex:min xsd:integer ;
  shex:semActs @shex:SemAct* ;
}
shex:NodeConstraint {
  #// rdfs:subClassOf shex:ShapeExpression;
  shex:datatype @rdfs:Datatype? ;
  shex:fractiondigits xsd:integer? ;
  shex:length xsd:integer? ;
  shex:maxexclusive (xsd:integer OR xsd:decimal OR xsd:double)? ;
  shex:maxinclusive (xsd:integer OR xsd:decimal OR xsd:double)? ;
  shex:maxlength xsd:integer? ;
  shex:minexclusive (xsd:integer OR xsd:decimal OR xsd:double) ;
  shex:mininclusive (xsd:integer OR xsd:decimal OR xsd:double) ;
  shex:minlength xsd:integer? ;
  shex:nodeKind @shex:NodeKind? ;
  shex:pattern xsd:string? ;
  shex:totaldigits xsd:integer? ;
  shex:values (IRI OR @shex:Stem OR @shex:StemRange)* ;
}
shex:NodeKind {
}
shex:OneOf {
  #// rdfs:subClassOf shex:TripleExpression;
  shex:annotation @shex:Annotation* ;
  shex:expressions @shex:TripleExpression+ ;
  shex:max (xsd:integer OR @shex: Cardinality) ;
  shex:min xsd:integer ;
  shex:semActs @shex:SemAct* ;
}
shex:Schema {
  shex:shapes @shex:ShapeExpression? ;
  shex:start @shex:ShapeExpression? ;
  shex:startActs @shex:SemAct* ;
}
shex:SemAct {
  shex:code xsd:string ;
  shex:name IRI ;
}
shex:Shape {
  #// rdfs:subClassOf shex:ShapeExpression;
  shex:closed xsd:boolean? ;
  shex:expression @shex:TripleExpression* ;
  shex:extra IRI* ;
}
shex:ShapeAnd {
  #// rdfs:subClassOf shex:ShapeExpression;
  shex:shapeExprs @shex:ShapeExpression+ ;
}
shex:ShapeExpression {
  (&shex:NodeConstraint | &shex:Shape | &shex:ShapeAnd | &shex:ShapeExternal | &shex:ShapeNot | &shex:ShapeOr)
}
shex:ShapeExternal {
  #// rdfs:subClassOf shex:ShapeExpression;
}
shex:ShapeNot {
  #// rdfs:subClassOf shex:ShapeExpression;
  shex:shapeExpr @shex:ShapeExpression ;
}
shex:ShapeOr {
  #// rdfs:subClassOf shex:ShapeExpression;
  shex:shapeExprs @shex:ShapeExpression+ ;
}
shex:Stem {
  shex:stem (xsd:anyUri OR @shex:Wildcard) ;
}
shex:StemRange {
  shex:exclusion (IRI OR @shex:Stem)* ;
  shex:stem (xsd:anyUri OR @shex:Wildcard) ;
}
shex:TripleConstraint {
  #// rdfs:subClassOf shex:TripleExpression;
  shex:annotation @shex:Annotation* ;
  shex:inverse xsd:boolean? ;
  shex:max (xsd:integer OR @shex: Cardinality) ;
  shex:min xsd:integer ;
  shex:predicate IRI ;
  shex:semActs @shex:SemAct* ;
  shex:valueExpr @shex:ShapeExpression ;
}
shex:TripleExpression {
  (&shex:EachOf | &shex:OneOf | &shex:TripleConstraint)
}
shex:Wildcard {
}
